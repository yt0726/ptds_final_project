[{"path":"/articles/my-vignette.html","id":"spotify-application","dir":"Articles","previous_headings":"","what":"Spotify Application","title":"my-vignette","text":"Function: Spotify::Spotify_gui function run application. run application, run directly start-program. see pop-window application, input preference following instructions first page Introduction. run application, need data. data set obtained Spotify contains 106,943 observation (music). Example","code":"Spotify::Spotify_gui()"},{"path":"/articles/my-vignette.html","id":"data-set-included-in-package","dir":"Articles","previous_headings":"","what":"Data set included in Package","title":"my-vignette","text":"Function: Spotify::Spotify_dataset package contains one data set also data source running application. data set Spotify, contains 20 columns: Track_id: Spotify ID track Artists: artists’ names performed track. one artist, separated . Album_name: album name track appears. Track_name: Name track. Popularity: popularity track value 0 10, 10 popular. popularity calculated algorithm based, part, total number plays track recent plays . Generally speaking, songs played lot now higher popularity songs played lot past. Duplicate tracks (e.g. track single album) rated independently. Artist album popularity derived mathematically track popularity. Duration_ms: track length milliseconds. Explicit: Whether track explicit lyrics (true = yes ; false = unknown). Danceability: Danceability describes suitable track dancing based combination musical elements including tempo, rhythm stability, beat strength, overall regularity. value 0.0 least danceable 10 danceable. Energy: Energy measure 0.0 10 represents perceptual measure intensity activity. Typically, energetic tracks feel fast, loud, noisy. example, death metal high energy, Bach prelude scores low scale. Key: key track . Integers map pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C♯/D♭, 2 = D, . Loudness: overall loudness track decibels (dB). Mode: Mode indicates modality (major minor) track, type scale melodic content derived. Major represented 1 minor 0. Speechiness: Speechiness detects presence spoken words track. exclusively speech-like recording (e.g. talk show, audio book, poetry), closer 10 attribute value. Values 6.6 describe tracks probably made entirely spoken words. Values 3.3 6.6 describe tracks may contain music speech, either sections layered, including cases rap music. Values 3.3 likely represent music non-speech-like tracks. Acousticness: confidence measure 0.0 10 whether track acoustic. 10 represents high confidence track acoustic. Instrumentalness: Predicts whether track contains vocals. “Ooh” “aah” sounds treated instrumental context. Rap spoken word tracks clearly “vocal”. closer instrumentalness value 10, greater likelihood track contains vocal content. Liveness: Detects presence audience recording. Higher liveness values represent increased probability track performed live. value 8 provides strong likelihood track live. Valence: measure 0 10 describing musical positiveness conveyed track. Tracks high valence sound positive (e.g. happy, cheerful, euphoric), tracks low valence sound negative (e.g. sad, depressed, angry). Tempo: overall estimated tempo track beats per minute (BPM). musical terminology, tempo speed pace given piece derives directly average beat duration Time_signature: estimated time signature. time signature (meter) notational convention specify many beats bar (measure). Track_genre: genre track belongs.","code":"knitr::kable(Spotify::Spotify_dataset[1:10,])"},{"path":"/articles/my-vignette.html","id":"scoring-function","dir":"Articles","previous_headings":"","what":"Scoring Function","title":"my-vignette","text":"Function: Spotify::Spotify_scoring want input new data set obtain specific list, might want run function individually. Thus, run function, data set one input variables, also need input music genres prefer, five favorite features corresponding levels, input selection via application. working data must: Preferably, data set column structure Spotify_dataset. , need ensure feature column begins fifth column result calculated based features’ column. Regarding output, get list contains data following: result: result data frame calculated based input features levels selection. top 10 music matched number levels features enter. user_genres: return input music genres. characters. user_features: return input five features. characters. user_level: return input five levels, correspond features. characters.","code":""},{"path":"/articles/my-vignette.html","id":"similarity-function","dir":"Articles","previous_headings":"","what":"Similarity Function","title":"my-vignette","text":"Function: Spotify::Spotify_similarity function consider using basic recommendation engine algorithm. Create similarity scores songs calculating Cosine similarity selected features levels songs data base, obtain new recommended songs list largest similarity selected filters. formula Cosine similarity follows:\\[sim(,B)=cos(,B)=\\frac{\\cdot B}{||||\\cdot||B||}=\\frac{\\sum_{= 1}^{n} A_{}B_{}}{\\sqrt{\\sum_{= 1}^{n} A_{}^2}\\sqrt{\\sum_{= 1}^{n} B_{}^2}}\\] Thus, thing previous spotify_appinfo function use different algorithm. Also, can run function new filters. , can see another example input variables obtain different result list.","code":""},{"path":"/articles/my-vignette.html","id":"radar-plot","dir":"Articles","previous_headings":"","what":"Radar plot","title":"my-vignette","text":"Function: Spotify::radar_plot run function individually, supposed input list object input variable. list object stucture output spotify_appinfo function. means, contains data frame result, user_genres, user_features, user_level. data frame result: one row except header. contains several music, function calculate average feature’s level draw plot. case, plot output, see two layers. One layer result list, another original input, features levels prefer.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ting Yang. Author, maintainer. Yooby Gigandet. Author. Jiaming Huang. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yang T, Gigandet Y, Huang J (2022). Spotify: Spotify tracks recommendation. R package version 0.1.0.","code":"@Manual{,   title = {Spotify: Spotify tracks recommendation},   author = {Ting Yang and Yooby Gigandet and Jiaming Huang},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"/index.html","id":"spotify-","dir":"","previous_headings":"","what":"Spotify","title":"Spotify tracks recommendation","text":"goal Spotify find user’s favorite music list. allows select features care corresponding levels. Spotify give two recommendation lists match possible selections. One lists obtained cosine similarity algorithm.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spotify tracks recommendation","text":"can install development version Spotify GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"yt0726/ptds_final_project\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Spotify tracks recommendation","text":"Run application run application, run code start-program. see pop-window application, input preference following instructions first page Introduction. run application, need data. data set obtained Spotify contains 106,943 observation (music). Run scoring function simulate output obtained selections. choose music’s genre : Funk, care Danceability, Energy, Loudness, Speechiness, Liveness, set corresponding levels 9,8,5,4,7, get list similar table . course, use function individually, transmit input like example. Run radar plot function Besides running application, similar data set includes data frame like table, five fixed features levels, run radar plot individually. Yet, need input rank variable indicates range songs want plot. example, want plot first sons, input rank=1, values features’ levels averaged. example plots one songs compared selections. Check example following:  Meantime, similar radar plot, also run similarity function separately. Check example following: Run similarity function","code":"Spotify::Spotify_gui() example <- Spotify_scoring(genres=\"Funk\",                 features=c(\"Danceability\",\"Energy\",\"Loudness\",\"Speechiness\",\"Liveness\"),                 levels = c(9,8,5,4,7)) knitr::kable(example$result) example_2 <- Spotify_similarity(genres = \"Funk\", features=c(\"Danceability\",\"Energy\",\"Loudness\",\"Speechiness\",\"Liveness\"), levels = c(9,8,5,4,7))  knitr::kable(example_2$result)"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Spotify authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/radar_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"radar plot for songs — radar_plot","title":"radar plot for songs — radar_plot","text":"Draw radar plot show value one song (rank) feature also show level feature user choose.","code":""},{"path":"/reference/radar_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"radar plot for songs — radar_plot","text":"","code":"radar_plot(x, rank, ...)"},{"path":"/reference/radar_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"radar plot for songs — radar_plot","text":"x object class spotify. rank rank top 10 songs want plot ... possible parameters method.","code":""},{"path":"/reference/radar_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"radar plot for songs — radar_plot","text":"fig radar plot","code":""},{"path":"/reference/radar_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"radar plot for songs — radar_plot","text":"Ting Yang","code":""},{"path":"/reference/radar_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"radar plot for songs — radar_plot","text":"","code":"top10_song <- Spotify_scoring(genres = \"Funk\", features=c(\"Danceability\",\"Energy\",\"Loudness\",\"Speechiness\",\"Liveness\"), levels = c(9,8,5,4,7)) radar_plot(top10_song, 1)  {\"x\":{\"visdat\":{\"186442f428ec\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"186442f428ec\",\"attrs\":{\"186442f428ec\":{\"fill\":\"toself\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatterpolar\"},\"186442f428ec.1\":{\"fill\":\"toself\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatterpolar\",\"r\":[9,8,5,4,7],\"theta\":[\"Danceability\",\"Energy\",\"Loudness\",\"Speechiness\",\"Liveness\"],\"name\":\"User' selections\",\"inherit\":true},\"186442f428ec.2\":{\"fill\":\"toself\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatterpolar\",\"r\":[\"9.10659898477157\",\"8.13\",\"8.17564693043301\",\"1.5440414507772\",\"2.36\"],\"theta\":[\"Danceability\",\"Energy\",\"Loudness\",\"Speechiness\",\"Liveness\"],\"name\":\"Song\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"polar\":{\"radialaxis\":{\"visible\":true,\"range\":[0,10],\"legend\":{\"font\":{\"family\":\"sans-serif\",\"size\":15,\"color\":\"#000\"},\"bgcolor\":\"#E2E2E2\",\"bordercolor\":\"#FFFFFF\",\"borderwidth\":2}}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"fillcolor\":\"rgba(31,119,180,0.5)\",\"fill\":\"toself\",\"type\":\"scatterpolar\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"frame\":null},{\"fillcolor\":\"rgba(255,127,14,0.5)\",\"fill\":\"toself\",\"type\":\"scatterpolar\",\"r\":[9,8,5,4,7],\"theta\":[\"Danceability\",\"Energy\",\"Loudness\",\"Speechiness\",\"Liveness\"],\"name\":\"User' selections\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"frame\":null},{\"fillcolor\":\"rgba(44,160,44,0.5)\",\"fill\":\"toself\",\"type\":\"scatterpolar\",\"r\":[\"9.10659898477157\",\"8.13\",\"8.17564693043301\",\"1.5440414507772\",\"2.36\"],\"theta\":[\"Danceability\",\"Energy\",\"Loudness\",\"Speechiness\",\"Liveness\"],\"name\":\"Song\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"line\":{\"color\":\"rgba(44,160,44,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/spotify_appinfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the score of Spotify tracks — spotify_appinfo","title":"Calculate the score of Spotify tracks — spotify_appinfo","text":"Calculate score Spotify tracks according features level feature user choose.","code":""},{"path":"/reference/spotify_appinfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the score of Spotify tracks — spotify_appinfo","text":"","code":"spotify_appinfo(genres, features, levels)"},{"path":"/reference/spotify_appinfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the score of Spotify tracks — spotify_appinfo","text":"genres string contain name genres user chooses. features list containing 5 characters. character represents feature user choose levels list containing 5 numerics. numeric represent value feature user want.","code":""},{"path":"/reference/spotify_appinfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the score of Spotify tracks — spotify_appinfo","text":"list_values list containing following attributes: result containing top10 scores tracks user_genre contain genre user choose user_feature contain features user choose user_level contain level feature user choose","code":""},{"path":"/reference/spotify_appinfo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the score of Spotify tracks — spotify_appinfo","text":"Ting Yang","code":""},{"path":"/reference/spotify_appinfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the score of Spotify tracks — spotify_appinfo","text":"","code":"spotify_appinfo(genres = \"Funk\", features=c(\"Danceability\",\"Energy\",\"Loudness\",\"Speechiness\",\"Liveness\"), levels = c(9,8,5,4,7)) #> $result #>                                                               Artists #> 437                                                  DJ Ghost Floripa #> 707                                                    Wilson Pickett #> 269                                                       James Brown #> 805                                              Snoop Dogg;The Doors #> 265                                                     George Benson #> 464 Snoop Dogg;Surjeet Singh;Akshay Kumar;Kuldeep Ral;Manjeet Ral;RDB #> 294                                                              Kyan #> 103                                                     2Pac;Big Syke #> 688                                      MC Marks;Mc Davi;Mc Don Juan #> 625                                         MC Teteu;JC NO BEAT;DJ F7 #>                                Track_name Track_genre Danceability Energy #> 437              Mega Funk Reload Vuk Vuk        Funk     9.106599   8.13 #> 707                           Let Me Know        Funk     8.395939   7.29 #> 269                Get Up Offa That Thing        Funk     8.395939   7.76 #> 805 Riders On The Storm - Fredwreck Remix        Funk     8.913706   7.86 #> 265    Give Me the Night (Single Version)        Funk     8.548223   8.01 #> 464           Singh Is Kinng - Title Song        Funk     9.035533   8.13 #> 294                              Mandrake        Funk     8.974619   7.70 #> 103         All Eyez On Me (ft. Big Syke)        Funk     8.852792   7.23 #> 688                          Ela Tá Tá Tá        Funk     8.903553   7.21 #> 625                 Ta Com Saudade de Mim        Funk     8.883249   7.75 #>     Loudness Speechiness Liveness  score_1 score_2  score_3  score_4 score_5 #> 437 8.175647   1.5440415     2.36 9.893401    9.87 6.824353 7.544041    5.36 #> 707 7.289089   1.3782383     6.35 9.395939    9.29 7.710911 7.378238    9.35 #> 269 7.776483   3.6787565     5.45 9.395939    9.76 7.223517 9.678756    8.45 #> 805 8.186375   1.5751295     1.22 9.913706    9.86 6.813625 7.575130    4.22 #> 265 7.976250   0.6331606     3.87 9.548223    9.99 7.023750 6.633161    6.87 #> 464 8.337125   0.7761658     1.24 9.964467    9.87 6.662875 6.776166    4.24 #> 294 8.328617   2.3937824     1.07 9.974619    9.70 6.671383 8.393782    4.07 #> 103 8.057821   2.5595855     3.27 9.852792    9.23 6.942179 8.559585    6.27 #> 688 7.970886   0.4818653     2.85 9.903553    9.21 7.029114 6.481865    5.85 #> 625 8.106653   0.5709845     1.07 9.883249    9.75 6.893347 6.570984    4.07 #>     final_score #> 437    1.657559 #> 707    1.650778 #> 269    1.650557 #> 805    1.647530 #> 265    1.647101 #> 464    1.647085 #> 294    1.643091 #> 103    1.642564 #> 688    1.641092 #> 625    1.638967 #>  #> $user_genre #> [1] \"Funk\" #>  #> $user_feature #> [1] \"Danceability\" \"Energy\"       \"Loudness\"     \"Speechiness\"  \"Liveness\"     #>  #> $user_level #> [1] 9 8 5 4 7 #>"},{"path":"/reference/Spotify_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Spotify tracks dataset — Spotify_dataset","title":"Spotify tracks dataset — Spotify_dataset","text":"data.frame analyzing visualizing. dataset Spotify songs different genres audio features. raw data downloaded Kaggle cleaned use.","code":""},{"path":"/reference/Spotify_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spotify tracks dataset — Spotify_dataset","text":"","code":"Spotify_dataset"},{"path":"/reference/Spotify_dataset.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spotify tracks dataset — Spotify_dataset","text":"data.frame 20 columns, : Track_id Spotify ID track Artists artists' names performed track. one artist, separated ; Album_name album name track appears Track_name Name track Explicit Whether track explicit lyrics (true = yes ; false = unknown) Key key track . Integers map pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C♯/D♭, 2 = D, . key detected, value -1 Mode Mode indicates modality (major minor) track, type scale melodic content derived. Major represented 1 minor 0 Time_signature estimated time signature. time signature (meter) notational convention specify many beats bar (measure). time signature ranges 3 7 indicating time signatures 3/4, 7/4. Track_genre genre track belongs Popularity popularity track value 0 10, 10 popular Duration_ms value describes track length. 0 10, scaled track length milliseconds Danceability Danceability describes suitable track dancing. value 0 least danceable 10 danceable Energy measure 0 10 represents perceptual measure intensity activity. Typically, energetic tracks feel fast, loud, noisy. Loudness loudness track value 0 10, 10 largest decibels (dB) Speechiness Speechiness detects presence spoken words track. value id 0 1. exclusively speech-like recording (e.g. talk show, audio book, poetry), closer 10 attribute value Acousticness confidence measure 0 10 whether track acoustic. 10 represents high confidence track acoustic Instrumentalness Predicts whether track contains vocals. closer instrumentalness value 10, greater likelihood track contains vocal content Liveness Detects presence audience recording. value 0 10. Higher liveness values represent increased probability track performed live. Valence measure 0 10 describing musical positiveness conveyed track. Tracks high valence sound positive (e.g. happy, cheerful, euphoric), tracks low valence sound negative (e.g. sad, depressed, angry) Tempo measurement speed pace given piece. value 0 10. higher value speed faster.","code":""},{"path":"/reference/Spotify_dataset.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Spotify tracks dataset — Spotify_dataset","text":"<https://www.kaggle.com/datasets/maharshipandya/-spotify-tracks-dataset?resource=download>","code":""},{"path":"/reference/Spotify_gui.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny application — Spotify_gui","title":"Shiny application — Spotify_gui","text":"shiny application example using package","code":""},{"path":"/reference/Spotify_gui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny application — Spotify_gui","text":"","code":"Spotify_gui()"},{"path":"/reference/Spotify_scoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the score of Spotify tracks — Spotify_scoring","title":"Calculate the score of Spotify tracks — Spotify_scoring","text":"Calculate score Spotify tracks according features level feature user choose.","code":""},{"path":"/reference/Spotify_scoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the score of Spotify tracks — Spotify_scoring","text":"","code":"Spotify_scoring(genres, features, levels)"},{"path":"/reference/Spotify_scoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the score of Spotify tracks — Spotify_scoring","text":"genres string contain name genres user chooses. features list containing 5 characters. character represents feature user choose levels list containing 5 numerics. numeric represent value feature user want.","code":""},{"path":"/reference/Spotify_scoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the score of Spotify tracks — Spotify_scoring","text":"list_values list containing following attributes: result containing top10 scores tracks user_genre contain genre user choose user_feature contain features user choose user_level contain level feature user choose","code":""},{"path":"/reference/Spotify_scoring.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the score of Spotify tracks — Spotify_scoring","text":"Ting Yang","code":""},{"path":"/reference/Spotify_scoring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the score of Spotify tracks — Spotify_scoring","text":"","code":"Spotify_scoring(genres = \"Funk\", features=c(\"Danceability\",\"Energy\",\"Loudness\",\"Speechiness\",\"Liveness\"), levels = c(9,8,5,4,7)) #> $result #>                                                               Artists #> 437                                                  DJ Ghost Floripa #> 707                                                    Wilson Pickett #> 269                                                       James Brown #> 805                                              Snoop Dogg;The Doors #> 265                                                     George Benson #> 464 Snoop Dogg;Surjeet Singh;Akshay Kumar;Kuldeep Ral;Manjeet Ral;RDB #> 294                                                              Kyan #> 103                                                     2Pac;Big Syke #> 688                                      MC Marks;Mc Davi;Mc Don Juan #> 625                                         MC Teteu;JC NO BEAT;DJ F7 #>                                Track_name Track_genre Danceability Energy #> 437              Mega Funk Reload Vuk Vuk        Funk     9.106599   8.13 #> 707                           Let Me Know        Funk     8.395939   7.29 #> 269                Get Up Offa That Thing        Funk     8.395939   7.76 #> 805 Riders On The Storm - Fredwreck Remix        Funk     8.913706   7.86 #> 265    Give Me the Night (Single Version)        Funk     8.548223   8.01 #> 464           Singh Is Kinng - Title Song        Funk     9.035533   8.13 #> 294                              Mandrake        Funk     8.974619   7.70 #> 103         All Eyez On Me (ft. Big Syke)        Funk     8.852792   7.23 #> 688                          Ela Tá Tá Tá        Funk     8.903553   7.21 #> 625                 Ta Com Saudade de Mim        Funk     8.883249   7.75 #>     Loudness Speechiness Liveness  score_1 score_2  score_3  score_4 score_5 #> 437 8.175647   1.5440415     2.36 9.893401    9.87 6.824353 7.544041    5.36 #> 707 7.289089   1.3782383     6.35 9.395939    9.29 7.710911 7.378238    9.35 #> 269 7.776483   3.6787565     5.45 9.395939    9.76 7.223517 9.678756    8.45 #> 805 8.186375   1.5751295     1.22 9.913706    9.86 6.813625 7.575130    4.22 #> 265 7.976250   0.6331606     3.87 9.548223    9.99 7.023750 6.633161    6.87 #> 464 8.337125   0.7761658     1.24 9.964467    9.87 6.662875 6.776166    4.24 #> 294 8.328617   2.3937824     1.07 9.974619    9.70 6.671383 8.393782    4.07 #> 103 8.057821   2.5595855     3.27 9.852792    9.23 6.942179 8.559585    6.27 #> 688 7.970886   0.4818653     2.85 9.903553    9.21 7.029114 6.481865    5.85 #> 625 8.106653   0.5709845     1.07 9.883249    9.75 6.893347 6.570984    4.07 #>     final_score #> 437    8.287794 #> 707    8.253889 #> 269    8.252785 #> 805    8.237648 #> 265    8.235506 #> 464    8.235426 #> 294    8.215455 #> 103    8.212819 #> 688    8.205462 #> 625    8.194836 #>  #> $user_genre #> [1] \"Funk\" #>  #> $user_feature #> [1] \"Danceability\" \"Energy\"       \"Loudness\"     \"Speechiness\"  \"Liveness\"     #>  #> $user_level #> [1] 9 8 5 4 7 #>"},{"path":"/reference/spotify_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the similarity of Spotify tracks — Spotify_similarity","title":"Calculate the similarity of Spotify tracks — Spotify_similarity","text":"Calculate score Spotify tracks according features level feature user choose.","code":""},{"path":"/reference/spotify_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the similarity of Spotify tracks — Spotify_similarity","text":"","code":"Spotify_similarity(genres, features, levels)"},{"path":"/reference/spotify_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the similarity of Spotify tracks — Spotify_similarity","text":"genres string contain name genres user chooses. features list containing 5 characters. character represents feature user choose levels list containing 5 numerics. numeric represent value feature user want.","code":""},{"path":"/reference/spotify_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the similarity of Spotify tracks — Spotify_similarity","text":"list_values list containing following attributes: result containing top10 similarity tracks user_genre contain genre user choose user_feature contain features user choose user_level contain level feature user choose","code":""},{"path":"/reference/spotify_similarity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the similarity of Spotify tracks — Spotify_similarity","text":"Ting Yang","code":""},{"path":"/reference/spotify_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the similarity of Spotify tracks — Spotify_similarity","text":"","code":"Spotify_similarity(genres = \"Funk\", features=c(\"Danceability\",\"Energy\",\"Loudness\",\"Speechiness\",\"Liveness\"), levels = c(9,8,5,4,7)) #> $result #>                              Artists                              Track_name #> 4                             Anitta                                Envolver #> 1                        Coolio;L.V.                      Gangsta's Paradise #> 9            Anitta;Chencho Corleone                                    Gata #> 5               Anitta;Missy Elliott                                   Lobby #> 7               Anitta;Missy Elliott                                   Lobby #> 3               Anitta;Missy Elliott                                   Lobby #> 2  Clean Bandit;Sean Paul;Anne-Marie Rockabye (feat. Sean Paul & Anne-Marie) #> 8                    Anitta;Swae Lee                                 Poquito #> 6                             Anitta                          Boys Don't Cry #> 10                   Anitta;Swae Lee                                 Poquito #>    Track_genre Danceability Energy Loudness Speechiness Liveness #> 4         Funk     8.253807   7.33 8.159740   0.8777202    0.909 #> 1         Funk     6.568528   5.14 7.302776   0.6145078    3.980 #> 9         Funk     5.258883   7.99 8.363391   1.2746114    7.870 #> 5         Funk     7.705584   7.11 8.200063   0.3979275    1.430 #> 7         Funk     7.705584   7.11 8.200063   0.3979275    1.430 #> 3         Funk     7.705584   7.11 8.200063   0.3979275    1.430 #> 2         Funk     7.309645   7.63 8.409263   0.5419689    1.800 #> 8         Funk     7.116751   8.51 8.416292   1.2953368    3.090 #> 6         Funk     6.030457   8.74 8.496199   0.4010363    1.480 #> 10        Funk     7.116751   8.51 8.416292   1.2953368    3.090 #>  #> $user_genre #> [1] \"Funk\" #>  #> $user_feature #> [1] \"Danceability\" \"Energy\"       \"Loudness\"     \"Speechiness\"  \"Liveness\"     #>  #> $user_level #> [1] 9 8 5 4 7 #>"}]
